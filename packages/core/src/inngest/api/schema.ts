/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/events': {
    /**
     * List events
     * @description Fetches recent events from your environment.
     */
    get: operations['list-v1-events'];
  };
  '/v1/events/{internalID}': {
    /**
     * Get an event
     * @description Retrieve a single event within your environment, given its internal ID
     */
    get: operations['get-v1-events-internalID'];
    parameters: {
      path: {
        internalID: string;
      };
    };
  };
  '/v1/events/{internalID}/runs': {
    /**
     * List event function runs
     * @description Returns function runs initialized by the given event
     */
    get: operations['get-v1-events-internalID-runs'];
    parameters: {
      path: {
        internalID: string;
      };
    };
  };
  '/v1/runs/{runID}': {
    /**
     * Get a function run
     * @description Returns a single function run by its run ID
     */
    get: operations['get-v1-runs-runID'];
    /**
     * Cancel a function run
     * @description Cancels a running function immediately.  No new steps will run after a function is cancelled.
     */
    delete: operations['delete-v1-runs-runID'];
    parameters: {
      path: {
        runID: string;
      };
    };
  };
  '/v1/runs/{runID}/jobs': {
    /**
     * Fetch function run jobs
     * @description An endpoint to fetch a subset of the function run's jobs within the function_id queue, in order of earliest to latest. This primarily allows you to see the order of the run's jobs within the function queue.
     *
     * A single function enqueues all function run jobs wihtin the same queue.  This endpoint fetches a subset of jobs for a given function run.
     *
     * This endpoint is rate limited and cached for 5 seconds.
     */
    get: operations['get-v1-runs-runID-jobs'];
    parameters: {
      path: {
        runID: string;
      };
    };
  };
  '/v1/cancellations': {
    /**
     * List cancellations
     * @description Returns all cancellations in your environment
     */
    get: operations['get-v1-cancellations'];
    /**
     * Create a cancellation
     * @description Creates a bulk cancellation, cancelling all functions in the given time range matching an optional expression
     */
    post: operations['post-v1-cancellations'];
  };
  '/v1/cancellations/{id}': {
    /**
     * Delete a cancellation
     * @description Delete a cancellation, preventing the cancellation from stopping function runs between the given dates with a given expression.
     */
    delete: operations['delete-v1-cancellations-id'];
    parameters: {
      path: {
        id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Event
     * @description An event and metadata attached to the event returned from an API response
     */
    Event: {
      /**
       * Format: ulid
       * @description Unique identifier used to represent this event internally and to the API.
       */
      internal_id: string;
      /**
       * Format: uuid
       * @description Your account ID
       */
      accountID: string;
      /**
       * Format: uuid
       * @description Your environment ID
       */
      environmentID: string;
      /** @description The origin of the event, eg. "key" for an event key. */
      source: string;
      /**
       * Format: uuid
       * @description The ID of the key used to deliver the event
       */
      sourceID?: string;
      /**
       * Format: date-time
       * @description When the event was received by Inngest
       */
      receivedAt: string;
      /** @description The `id` field specified in the event */
      id: string;
      /** @description The `name` field specified in the event */
      name: string;
      /** @description The `data` field specified in the event */
      data: Record<string, never>;
      /** @description The `user` field specified in the event */
      user?: Record<string, never> | null;
      /** @description The `ts` field specified in the event */
      ts: number;
      /** @description The `v` field specified in the event */
      v?: string | null;
    };
    'Function-run': {
      /** @description The ID of the function run */
      run_id: string;
      /**
       * Format: date-time
       * @description When the function run was scheduled
       */
      run_started_at: string;
      /** @description If the function has ended, the end time.  A function has ended if the status is not Running. */
      ended_at?: string | null;
      /** @enum {unknown} */
      status: 'Running' | 'Completed' | 'Failed' | 'Cancelled';
      output?:
        | Record<string, never>
        | unknown[]
        | number
        | string
        | boolean
        | null;
      function_id: string;
      function_version: number;
      environment_id: string;
      /** @description The internal ID of the triggering event, if the function was initialized via an event */
      event_id?: string | null;
      /** @description The ID of the batch, if this function was initialized via a batch of events */
      batch_id?: string | null;
      /** @description The run ID of the original run, if this is a replay */
      original_run_id?: string | null;
      /** @description The cron used to initialize this scheduled function, if the function was initialized via a cron */
      cron?: string | null;
    };
    /**
     * Job
     * @description A single job returned when listing jobs within a run ID
     */
    Job: {
      /**
       * Format: date-time
       * @description The time the job is scheduled to run
       */
      at?: string;
      /** @description The position of the job within the function queue */
      position?: number;
      /** @description The attempt number of the job */
      attempt?: number;
    };
    /** Cancellation */
    Cancellation: {
      id: string;
      environment_id: string;
      function_internal_id: string;
      function_id: string;
      /** Format: date-time */
      started_before: string;
      /** Format: date-time */
      started_after?: string;
      if?: string;
    };
  };
  responses: {
    /** @description The response when listing events. */
    'Event-list': {
      content: {
        'application/json': {
          data: components['schemas']['Event'][];
          metadata: {
            fetchedAt: string;
            cachedUntil?: string | null;
          };
        };
      };
    };
    /** @description An error from the API */
    Error: {
      content: {
        'application/json': {
          error?: string;
          data?: Record<string, never> | string | null;
          status?: number;
        };
      };
    };
    /** @description The response when fetching an event */
    Event: {
      content: {
        'application/json': {
          data: components['schemas']['Event'];
          metadata: {
            fetchedAt: string;
            cachedUntil?: string | null;
          };
        };
      };
    };
    /** @description The response when fetching a function run */
    'Function-run': {
      content: {
        'application/json': {
          data: components['schemas']['Function-run'];
          metadata: {
            fetchedAt: string;
            cachedUntil?: string | null;
          };
        };
      };
    };
    /** @description The response when fetching function runs */
    'Function-run-list': {
      content: {
        'application/json': {
          data: components['schemas']['Function-run'][];
          metadata: {
            fetchedAt: string;
            cachedUntil?: string | null;
          };
        };
      };
    };
    /** @description The response when fetching function runs */
    'Job-list': {
      content: {
        'application/json': {
          data: components['schemas']['Job'][];
          metadata: {
            fetchedAt: string;
            cachedUntil?: string | null;
          };
        };
      };
    };
    /** @description The response when listing cancellations */
    'Cancellation-list': {
      content: {
        'application/json': {
          data?: components['schemas']['Cancellation'][];
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * List events
   * @description Fetches recent events from your environment.
   */
  'list-v1-events': {
    parameters: {
      query?: {
        /** @description List events received before this RFC3339 timestamp */
        received_before?: string;
        /** @description List events received after this RFC3339 timestamp */
        received_after?: string;
        /** @description The number of events to list */
        limit?: number;
        /** @description The optional name of the event to filter by */
        name?: string;
        /** @description The internal event ID used as a cursor to paginate through events within your time range */
        cursor?: string;
      };
    };
    responses: {
      200: components['responses']['Event-list'];
      401: components['responses']['Error'];
    };
  };
  /**
   * Get an event
   * @description Retrieve a single event within your environment, given its internal ID
   */
  'get-v1-events-internalID': {
    parameters: {
      path: {
        internalID: string;
      };
    };
    requestBody?: {
      content: {
        '*/*': never;
      };
    };
    responses: {
      200: components['responses']['Event'];
      404: components['responses']['Error'];
    };
  };
  /**
   * List event function runs
   * @description Returns function runs initialized by the given event
   */
  'get-v1-events-internalID-runs': {
    parameters: {
      path: {
        internalID: string;
      };
    };
    requestBody?: {
      content: {
        '*/*': never;
      };
    };
    responses: {
      200: components['responses']['Function-run-list'];
      404: components['responses']['Error'];
    };
  };
  /**
   * Get a function run
   * @description Returns a single function run by its run ID
   */
  'get-v1-runs-runID': {
    parameters: {
      path: {
        runID: string;
      };
    };
    responses: {
      200: components['responses']['Function-run'];
      404: components['responses']['Error'];
    };
  };
  /**
   * Cancel a function run
   * @description Cancels a running function immediately.  No new steps will run after a function is cancelled.
   */
  'delete-v1-runs-runID': {
    parameters: {
      path: {
        runID: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Fetch function run jobs
   * @description An endpoint to fetch a subset of the function run's jobs within the function_id queue, in order of earliest to latest. This primarily allows you to see the order of the run's jobs within the function queue.
   *
   * A single function enqueues all function run jobs wihtin the same queue.  This endpoint fetches a subset of jobs for a given function run.
   *
   * This endpoint is rate limited and cached for 5 seconds.
   */
  'get-v1-runs-runID-jobs': {
    parameters: {
      path: {
        runID: string;
      };
    };
    responses: {
      200: components['responses']['Job-list'];
    };
  };
  /**
   * List cancellations
   * @description Returns all cancellations in your environment
   */
  'get-v1-cancellations': {
    responses: {
      200: components['responses']['Cancellation-list'];
    };
  };
  /**
   * Create a cancellation
   * @description Creates a bulk cancellation, cancelling all functions in the given time range matching an optional expression
   */
  'post-v1-cancellations': {
    requestBody?: {
      content: {
        'application/json': {
          /** @description The client ID specified via the SDK for the app, eg: `new Inngest({ id: "this-id" })` */
          app_id: string;
          /** @description The function ID specified in the SDK */
          function_id: string;
          /** Format: date-time */
          started_before: string;
          /** Format: date-time */
          started_after?: string;
          if?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': {
            data?: components['schemas']['Cancellation'];
            error?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a cancellation
   * @description Delete a cancellation, preventing the cancellation from stopping function runs between the given dates with a given expression.
   */
  'delete-v1-cancellations-id': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Cancellation deleted */
      200: {
        content: never;
      };
    };
  };
}
