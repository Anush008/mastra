// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetSessionsData, GetSessionsError, GetSessionsResponse, PostSessionsData, PostSessionsError, PostSessionsResponse, GetSessionsByIdData, GetSessionsByIdError, GetSessionsByIdResponse, GetSessionsByIdLogsData, GetSessionsByIdLogsError, GetSessionsByIdLogsResponse, PostContextsData, PostContextsError, PostContextsResponse, PostExtensionsData, PostExtensionsError, PostExtensionsResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * List Sessions
 * Retrieve a list of sessions
 */
export const getSessions = <ThrowOnError extends boolean = false>(options: Options<GetSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSessionsResponse, GetSessionsError, ThrowOnError>({
        ...options,
        url: '/sessions'
    });
};

/**
 * Create a Session
 * Create a new browser session
 */
export const postSessions = <ThrowOnError extends boolean = false>(options: Options<PostSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSessionsResponse, PostSessionsError, ThrowOnError>({
        ...options,
        url: '/sessions'
    });
};

/**
 * Get Session
 * Retrieve details of a specific session
 */
export const getSessionsById = <ThrowOnError extends boolean = false>(options: Options<GetSessionsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSessionsByIdResponse, GetSessionsByIdError, ThrowOnError>({
        ...options,
        url: '/sessions/{id}'
    });
};

/**
 * Get Session Logs
 * Retrieve logs for a specific session
 */
export const getSessionsByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetSessionsByIdLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSessionsByIdLogsResponse, GetSessionsByIdLogsError, ThrowOnError>({
        ...options,
        url: '/sessions/{id}/logs'
    });
};

/**
 * Create a Context
 * Create a new context
 */
export const postContexts = <ThrowOnError extends boolean = false>(options: Options<PostContextsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostContextsResponse, PostContextsError, ThrowOnError>({
        ...options,
        url: '/contexts'
    });
};

/**
 * Upload an Extension
 * Upload a new browser extension
 */
export const postExtensions = <ThrowOnError extends boolean = false>(options: Options<PostExtensionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostExtensionsResponse, PostExtensionsError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/extensions'
    });
};