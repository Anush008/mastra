// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetV1SessionsBySessionIdData, GetV1SessionsBySessionIdError, GetV1SessionsBySessionIdResponse, GetReferenceApiConnectError, GetReferenceApiConnectResponse, GetReferenceApiListAllSessionsError, GetReferenceApiListAllSessionsResponse, PostReferenceApiUploadAnExtensionError, PostReferenceApiUploadAnExtensionResponse, PostWebdriverData, PostWebdriverError, PostWebdriverResponse, GetConnectError, GetConnectResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Retrieve information from a Session
 * Use this endpoint to get information from a specific Session.
 */
export const getV1SessionsBySessionId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetV1SessionsBySessionIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV1SessionsBySessionIdResponse, GetV1SessionsBySessionIdError, ThrowOnError>({
        ...options,
        url: '/v1/sessions/{sessionId}'
    });
};

/**
 * Connect to a Session
 * Use WebSocket or HTTP to connect or create a Session on-the-fly
 */
export const getReferenceApiConnect = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReferenceApiConnectResponse, GetReferenceApiConnectError, ThrowOnError>({
        ...options,
        url: '/reference/api/connect'
    });
};

/**
 * List all Sessions
 * Get full control of the Browserâ€™s Sessions
 */
export const getReferenceApiListAllSessions = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReferenceApiListAllSessionsResponse, GetReferenceApiListAllSessionsError, ThrowOnError>({
        ...options,
        url: '/reference/api/list-all-sessions'
    });
};

/**
 * Upload a Chrome extension
 * Configure custom Chrome extensions for your Sessions
 */
export const postReferenceApiUploadAnExtension = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<PostReferenceApiUploadAnExtensionResponse, PostReferenceApiUploadAnExtensionError, ThrowOnError>({
        ...options,
        url: '/reference/api/upload-an-extension'
    });
};

/**
 * Create a Session
 * Create a new session using Selenium
 */
export const postWebdriver = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostWebdriverData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostWebdriverResponse, PostWebdriverError, ThrowOnError>({
        ...options,
        url: '/webdriver'
    });
};

/**
 * Connect to a Session
 * Connect or create a session on-the-fly
 */
export const getConnect = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetConnectResponse, GetConnectError, ThrowOnError>({
        ...options,
        url: '/connect'
    });
};